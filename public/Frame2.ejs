<script>
  let chatList; // 모든 채팅로그를 보유하고 있는 변수
  let user;
  const url = 'http://localhost:8002';

  window.onload = async () => {
    Date.prototype.format = function(f) {
      if (!this.valueOf()) return " ";
      var weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
      var d = this;
      return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\/p)/gi, function($1) {
        switch ($1) {
          case "yyyy": return d.getFullYear();
          case "yy": return (d.getFullYear() % 1000).zf(2);
          case "MM": return (d.getMonth() + 1).zf(2);
          case "dd": return d.getDate().zf(2);
          case "E": return weekName[d.getDay()];
          case "HH": return d.getHours().zf(2);
          case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
          case "mm": return d.getMinutes().zf(2);
          case "ss": return d.getSeconds().zf(2);
          case "a/p": return d.getHours() < 12 ? "오전" : "오후";
          default: return $1;
        }})
      }; //한자리일경우 앞에 0을 붙여준다.    
    String.prototype.string = function(len){
     var s = '', i = 0;
     while (i++ < len) { s += this; }
      return s;
    };
    String.prototype.zf = function(len){return "0".string(len - this.length) + this;};
    Number.prototype.zf = function(len){return this.toString().zf(len);};

    const socket = io.connect(url, {
      path: '/socket.io',
      cors:{
        origin:'*'
      },
      query: {
        nickname:nickname,
        token:'weafwealfjkawehfawe'
      }
    });
    
    socket.on('connect', () => {
      let original=$("#Hchat").text()
      $("#Hchat").text(nickname+'님의 '+original)
    });

    socket.on('sendInitChatLog', (chatLogs) => {
      console.log(chatLogs);
      chatList = chatLogs.chatList
      user = chatLogs.user

      $('#chatRoom').empty();

      for (chatRoom of user.chatRoomBelonged) {
        let option = $(`<option>${chatRoom.name}</option>`)
        $('#chatRoom').append(option);
      }
      
      $("#HuserId").text(`(${user._id})`)
      setChatLogToRoom();
      checkMessage();
    })

    socket.on('error',(msg)=>{
      $("#notice").val('');
      $("#notice").text(msg);
    })

    socket.on('custom_disconnect',(disconnectMsg)=>{
      $("#notice").text(disconnectMsg);
    })

    // 새 방 만들기 버튼 클릭 시
    $('#createNewRoom').on('click', function () {
      let userIdToJoin = $("#userIdToJoin").val()
      let chatRoomName=$("#chaRoomNameToCreate").val()

      $("#chaRoomNameToCreate").val('');
      $("#userIdToJoin").val('')
      
      socket.emit('newRoomRequest', {
        userIdToJoin,chatRoomName
      });
      
    })

    // 방 번호가 바뀌었을 때
    $("#chatRoom").on("change", function(){
      setChatLogToRoom();
      checkMessage();
    })

    // 메세지 전송(Send) 버튼 클릭 시 
    $('#chatSend').on('click', function () {
      
      let msg = document.getElementById('chatMessage').value;

      if(!msg){
        alert('메세지를 입력하세요.')
        return;
      }

      socket.emit('sendMessage', {
        chatRoom_id:selectedRoom(),
        msg: $("#chatMessage").val()
      })

      $("#chatMessage").val('');
    })

    // 안 읽은 채팅 수 확인
    $('#checkMyRoom').on('click', function(){
      $("#notice").val('');
      socket.emit('checkMyRoom',{chatRooms:user.chatRoomBelonged})
    })

    $("#exitChatRoom").on('click',function(){
      console.log(selectedRoom())
      socket.emit('exitChatRoomRequest',selectedRoom())
    })

    socket.on('newChat',function(data){

      // 현재 선택된 채팅방에 새 메세지가 도착했다면
      if(data.sender._id!=user._id && data.chatRoom_id._id==selectedRoom()._id){
        checkMessage()
      }
      chatList.push(data)
      setChatLogToRoom();

    })

    socket.on('serverResponse', data=>{
      console.log(data)
      $("#notice").val('');
      $("#notice").text(data.msg);
      if(data.data){
        $("#notice").text(data.msg+'\n'+JSON.stringify(data.data));
      }
    })

    socket.on('joinRoomRequest',(chatRoomId)=>{
      console.log('joinRoomRequest 도착')
      socket.emit('joinRoomResponse', chatRoomId)
    })

    
    // Room select 또는 초기 세팅 시 채팅 로드 함수
    const setChatLogToRoom = () => {
      $('#chatBoard').empty();
      let selectedRoom = $("#chatRoom").val()
      
      chatList.forEach(chat => {
        if (chat.chatRoom_id.name == selectedRoom) {
          $("#chatBoard").append(`<p>${chat.sender.nickname} (${new Date(chat.createdAt).format('a/p hh시 mm분')}): ${chat.msg}</p>`);
        }
      })
      $("#chatBoard").scrollTop($("#chatBoard")[0].scrollHeight);
    }

    //메세지를 읽었음을 알리는 함수
    const checkMessage = () => {
      let selectedRoom = $('#chatRoom').val();

      socket.emit('checkMessage', {
        name: selectedRoom
      });
    }

    const selectedRoom=()=>{
      return user.chatRoomBelonged.find(chatRoom=>chatRoom.name==$('#chatRoom').val())
    }
  }
  
</script>
<style>
  #chatBoard {
    width: 500px;
    height: 500px;
    border: 2px solid gray;
  }
</style>

<body>
<h2 id="Hchat">채팅방</h2>
<h4 id="HuserId"></h4>
<form id="form">
  <select id="chatRoom">
    <option></option>
  </select>

  <input type="text" id="chatMessage" placeholder="메세지 입력" />
  <input type="button" id="chatSend" value="Send" />

</form>

<br />
<div id="chatBoard" style="overflow:scroll; "></div>
<br />
<input type="button" id="exitChatRoom" value="방 나가기" />
<input type="text" id="chaRoomNameToCreate" placeholder="방 이름을 입력" />
<input type="text" id="userIdToJoin" placeholder="함께할 친구 ID 입력" />
<input type="button" id="createNewRoom" value="새 방 만들기" />
<br />
<input type="button" id="checkMyRoom" value="채팅 알림 확인" />
<h1 id="notice"></h1>
</body>

</html>